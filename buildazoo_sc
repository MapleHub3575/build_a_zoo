-- ‡∏£‡∏≠‡πÄ‡∏Å‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
task.delay(5, function()
    local Players = game:GetService("Players")
    local TeleportService = game:GetService("TeleportService")
    local DataStoreService = game:GetService("DataStoreService")
    local HttpService = game:GetService("HttpService")
    local LocalPlayer = Players.LocalPlayer

    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á DataStore ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Config
    local ConfigStore = DataStoreService:GetDataStore("MapleHubConfig")

    -- ‡πÇ‡∏´‡∏•‡∏î Rayfield UI
    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

    -- Config ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    local Config = {
        AutoFarm = false,
        FarmDelay = 15,
        AutoRejoin = false,
        RejoinDelay = 5
    }

    -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î Config ‡∏à‡∏≤‡∏Å DataStore
    local function LoadConfig()
        local success, data = pcall(function()
            return ConfigStore:GetAsync(LocalPlayer.UserId)
        end)
        if success and data then
            for k,v in pairs(data) do
                if Config[k] ~= nil then
                    Config[k] = v
                end
            end
            print("Config Loaded")
        else
            print("No saved Config or failed to load")
        end
    end

    -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ã‡∏ü Config ‡∏•‡∏á DataStore
    local function SaveConfig()
        local success, err = pcall(function()
            ConfigStore:SetAsync(LocalPlayer.UserId, Config)
        end)
        if success then
            print("Config Saved")
        else
            warn("Failed to save Config: "..err)
        end
    end

    -- ‡πÇ‡∏´‡∏•‡∏î Config ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    LoadConfig()

    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Rayfield
    local Window = Rayfield:CreateWindow({
        Name = "Maple Hub",
        LoadingTitle = "Maple Hub Loading...",
        LoadingSubtitle = "by Maple_D",
        ConfigurationSaving = { Enabled = false }, -- ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ DataStore
        Discord = { Enabled = false }
    })

    -- üåæ Farm Tab
    local FarmTab = Window:CreateTab("üåæ Farm", 4483362458)
    FarmTab:CreateSection("Auto Farm Settings")

    -- Toggle Auto Farm
    FarmTab:CreateToggle({
        Name = "Auto Farm",
        CurrentValue = Config.AutoFarm,
        Flag = "AutoFarm",
        Callback = function(Value)
            Config.AutoFarm = Value
            SaveConfig()
            print("Auto Farm " .. (Value and "On" or "Off"))
        end,
    })

    -- Slider Delay Farm
    FarmTab:CreateSlider({
        Name = "Delay Farm",
        Range = {0.1, 100},
        Increment = 1,
        Suffix = "s",
        CurrentValue = Config.FarmDelay,
        Flag = "FarmDelay",
        Callback = function(Value)
            Config.FarmDelay = Value
            SaveConfig()
            print("Delay Farm = " .. Value .. "s")
        end,
    })

    -- ‚öô Main Tab
    local MainTab = Window:CreateTab("‚öô Main", 4483362458)
    MainTab:CreateSection("Auto Rejoin Settings")

    -- Toggle Auto Rejoin
    MainTab:CreateToggle({
        Name = "Auto Rejoin",
        CurrentValue = Config.AutoRejoin,
        Flag = "AutoRejoin",
        Callback = function(Value)
            Config.AutoRejoin = Value
            SaveConfig()
            print("Auto Rejoin " .. (Value and "On" or "Off"))
        end,
    })

    -- Slider Rejoin Delay
    MainTab:CreateSlider({
        Name = "Rejoin Delay",
        Range = {1, 30},
        Increment = 1,
        Suffix = "s",
        CurrentValue = Config.RejoinDelay,
        Flag = "RejoinDelay",
        Callback = function(Value)
            Config.RejoinDelay = Value
            SaveConfig()
            print("Rejoin Delay = " .. Value .. "s")
        end,
    })

    -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Pets
    local function WaitForPetsFolder()
        return workspace:WaitForChild("Pets")
    end

    -- Auto Farm Logic
    task.spawn(function()
        local petsFolder = WaitForPetsFolder()
        while true do
            if Config.AutoFarm then
                for _, pet in pairs(petsFolder:GetChildren()) do
                    local root = pet:FindFirstChild("RootPart")
                    if root then
                        local remote = root:FindFirstChild("RE")
                        if remote and remote:IsA("RemoteEvent") then
                            pcall(function()
                                remote:FireServer("Claim")
                            end)
                        end
                    end
                end
                task.wait(Config.FarmDelay)
            else
                task.wait(1)
            end
        end
    end)

    -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠ PromptGui
    local function WaitForPromptGui()
        return game:GetService("CoreGui"):WaitForChild("PromptGui")
    end

    -- Auto Rejoin Logic
    task.spawn(function()
        local promptGui = WaitForPromptGui()
        promptGui.promptOverlay.ChildAdded:Connect(function(obj)
            if obj.Name == "ErrorPrompt" and Config.AutoRejoin then
                task.spawn(function()
                    task.wait(Config.RejoinDelay)
                    pcall(function()
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
                    end)
                end)
            end
        end)
    end)
end)
